class Triangle {

  int right = 0;
  int left = 0;
  int down = 0;
  int up =0;
  
  float triWidth = 50;   
  float triHeight= 50;

  float triWidthBob = 100;   
  float triHeightBob = 100;

  float x = triWidth/2;
  float y = triHeight/2; // Alice coordinate
  
  float xBob;
  float yBob;// Bob coordinates

  float aSize;  // size
  float bSize;
  float cSize;
  
  color c;
  float speed;
  float xspeed;  // Speed of the shape
  float yspeed;  // Speed of the shape

  int xdirection = 5;  // Left to Right
  int ydirection = 5;  // Top to Bottom

  String diag = "45degrees";    //Bob's start direction on the screen
  String direction = "RIGHT";  //Alice's start direction on the screen


  // Contructors//
  Triangle() {
    c = color(59, 156, 99);  // bob
    yspeed = 1;
    xspeed = 1;
    xBob = random (50, 950);
    yBob = random (50, 450);  
    bSize = 1;
  }

  Triangle(color c, float speed, float size) {  // alice and charlie
    this.c = c;
    this.speed = speed;
    this.aSize = size;
    this.cSize = size;
    x = random (50,950); 
    y = random (50,450);  
  }



  // ************* - Alice - ************* //
  void display() {  

    pushMatrix();
    translate(x, y);                //move half Alice size right, down for starting
    if (direction == "RIGHT") {
      rotate(radians(0));        //0 dregrees
    } else if (direction == "DOWN") {
      rotate(radians(90));    //90degrees
    } else if (direction == "LEFT") {
      rotate(radians(180));     //180degrees
    } else if (direction == "UP") {
      rotate(radians(-90));  //-90 degrees
    } 

    translate(-triWidth/2, -triHeight/2);  //move half Alice size left, up for ending


    fill(c);
    scale(aSize);
    beginShape();
    vertex(0, 0);
    vertex(50, 25);
    vertex(0, 50);

    endShape(CLOSE);
    ellipseMode(RADIUS);  
    fill(0);  
    ellipse(50, 25, 5, 5);   
    popMatrix();
  }

  void drive() {

    switch (direction) {
    case "RIGHT":
      x = x + speed;
      if (x >= (width - 25)) {  //If X greater than screen minus half car
        direction = "DOWN";
      }
      break;
    case "DOWN":
      y = y + speed;
      if (y >= (height - 25)) {
        direction = "LEFT";
      }
      break;
    case "LEFT":
      x = x - speed;
      if (x <= 25) {
        direction = "UP";
      }
      break;
    case "UP":
      y = y - speed;
      if (y <= 25) {
        direction = "RIGHT";
      }
      break;
    }
  }



  // ************* - Bob - ************* //
  void drive2() {
    xBob = xBob + ( xspeed * xdirection );
    yBob = yBob + ( yspeed * ydirection );


    if (xBob > (width - triWidthBob/2) || xBob < (triWidthBob/2)) {
      xdirection *= -1;
    }
    if (yBob > (height - triHeightBob/2)|| yBob < (triHeightBob/2)) {
      ydirection *= -1;
    }
  }

  void display2() {

    pushMatrix();
    translate(xBob, yBob);
    switch (diag) { 

    case "45degrees":                  
      rotate(radians(45));                   // Starts 45 degree 

      if (yBob>(height - triHeightBob/2)) {       //if reach bottom rotate 315
        diag = "315degrees";
      }
      if (xBob>(width-triWidthBob/2)) {
        diag = "135degrees";
      }
      break;


    case "315degrees":
      rotate(radians(315));                         //turn 315                       
      if (yBob<(triHeightBob/2)) {              //
        diag = "45degrees";
      }
      if (xBob>(width-triWidthBob/2)) {
        diag = "225degrees";
      }
      break;

    case "135degrees":
      rotate(radians(135));                   //turn 135 
      if (yBob >(height - triHeightBob/2)) {    //
        diag = "225degrees";
      } 
      if (xBob < triWidthBob/2) {
        diag = "45degrees";
      }
      break;  

    case "225degrees":
      rotate(radians(225));                  //turn 225 
      if ( yBob < triHeightBob/2) {
        diag = "135degrees";
      }
      if (xBob < triWidthBob/2) {
        diag = "315degrees";
      }
      break;
    }

    translate(-triWidthBob/2, -triHeightBob/2);


    fill(c);
    scale(bSize);
    beginShape();
    vertex(0, 0);
    vertex(100, 50);
    vertex(0, 100);
    endShape(CLOSE);
    ellipseMode(RADIUS);  
    fill(0);  
    ellipse(100, 50, 5, 5);  
    popMatrix();
  }
  
  // charlie// *************************************
  void drive3(){
        if (keys['q']) {  // left
      x-=speed;
      up = 0;
      down = 0;
      right=0; 
      left=1;
    }   


    else if (keys['d']) { // right
      x+=speed;   
      up = 0;
      down = 0;
      left=0; 
      right=1;
    } 

    if (keys['z']) {  // up
      y-=speed; 
      down = 0;
      left=0; 
      right=0;
      up = 1;
    }
    else if (keys['s']) {  // down
      y+=speed; 
      left=0; 
      right=0;
      up = 0;
      down = 1;
    }
  }
   
   void display3() {
    pushMatrix();   
    translate(x, y);


    if (left==1) {
      rotate(PI);
    }
    if (right==1) {
      rotate(0);
    }
    if (down==1) {
      rotate(PI/2);
    }
    if (up==1) {
      rotate(3*PI/2);
    }



    fill(c);
    scale(cSize);
    beginShape();
    vertex(0, 0);
    vertex(100, 50);
    vertex(0, 100);
    endShape(CLOSE);
    ellipseMode(RADIUS);  
    fill(0);  
    ellipse(100, 50, 5, 5);  
    popMatrix();
  }
  //**************************************************

  void size() {

    if (keys['p']) {
      aSize += 0.1;
    } else if (keys['o']) {
      aSize -= 0.1;
    }
    if (keys['u']) {
      bSize += 0.1;
    } else if (keys['i']) {
      bSize -= 0.1;
    }
    if (keys['m']) {
      cSize += 0.1;
    } else if (keys['l']) {
      cSize -= 0.1;
    }
    
  }
}
